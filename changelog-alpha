//==================================================================================================
//                                   ______           _    _       
//                                  |  ____|         | |  (_)      
//                                  | |__   _ __ __ _| | ___ _ __  
//                                  |  __| | '__/ _` | |/ / | '_ \ 
//                                  | |____| | | (_| |   <| | | | |
//                                  |______|_|  \__,_|_|\_\_|_| |_|
//
//== Descrição =====================================================================================
// Registro de Mudanças
//== Formatação ====================================================================================
// {DATA} - (VERSÃO)
// {DESCRIÇÃO}
//== Manual ========================================================================================
// DATA: Dia em que foi feito a mudança no seguinte formato: {DIA}.{MÊS}.{ANO}
//
// VERSÃO: Número da versão respectiva a mudança feita: {SEASON}.{EPISÓDIO}.{PATCH}.{REVISÃO}
//			- SEASON: número da temporada em que o projeto está (anual).
//			- EPISÓDIO: grande conjunto de mudanças contendo várias novidades (mensal).
//			- PATCH: pequeno conjunto de mudanças completas pré-planejadas (semanal).
//			- REVISÃO: quantidade de modificações feitas no projeto (revisão SVN).
//
// DESCRIÇÃO: Deve conter todas as informações respectivas as mudanças ocorridas na revisão.
//				Acompanhando o seguinte formato: {INDENTAÇÃO}- {MENSAGEM}
//			- INDENTAÇÃO: Deve ser feito através de espaços largos (tabs).
//			- MENSAGEM: Breve parágrafo para explicar as alterações feitas.
//==================================================================================================

27.10.2016 - 0.0.2.17
- DefaultLoader.toString() não estava funcionando corretamente com ObjectDescription.
- Pequenos ajustes de documentações devido a mudanças anteriores.
- ShaderDefault passa a ser um armazenado de dados para programação Shader temporário como ShaderDataDefault.
- Modificado os métodos que Shader vai implementar e renomado para ShaderRender.
- Implementação de EngineListener para resolver possíveis problemas de procedimentos entre o init e render da Engine.
- Estrutura para leitura de computação gráfica em GLSL conforme os mesmos padrões usados para modelos e texturas.
	- ShaderReaderFactory é especificado quais os tipos de extensões e classes para leitura dos arquivos.
	- ShaderRoot irá guardar as informações dos dados no OpenGL podendo gerar vários Shader.
	- Cada Shader é uma referência para um ShaderRoot podendo usar o mesmo conteúdo de forma diferente.
	- ShaderLoader fica responsável por transcrever os dados obtidos do leitor para o OpenGL.
	- Definido ShaderReaderGLSL para ser o leitor dos arquivos com extensão glsl.

22.10.2016 - 0.0.1.16
- Pequenos ajustes em update() e wasClicked() para evitar possíveis NullPointerExceptions, VirtualKeyboard.

21.10.2016 - 0.0.1.15
- A lógica para wasClicked() não estava 100% funcional, VirtualKeyboard.

21.10.2016 - 0.0.1.14
- Não há necessidade de existir engine.Keyboard, será usado Keyboard/VirtualKeyboard da API.
- VirtualKeyboard.update() causava Exception, modificado a lógica, porém mesma ideia.
- Agora VirtualKeyboard.dispatch() só irá funcionar se a janela do OpenGL estiver ativa.
	- Antes mesmo quando a janela minimizada ou desfocada despachava os KeyEvent.
- Corrigido a lógica de wasClicked() que estava sempre retornando true, VirtualKeyboard.
- Também foi movido INSTANCE de Keyboard para VirtualKeyboard, caso contrário não vai funcionar.
- VirtualKeyboard também será vinculado a biblioteca de serviços, ServiceSystem.

21.10.2016 - 0.0.1.13
- Um dos construtores de FileVersion não estava definindo minor corretamente.
- Alterando ModelRender para que seja um GLBind, já que usa da mesma ideia/funções.
	- Também foi incorporado outro método, getTexture().
- Agora ModelDataDefault permite usar setNormal com um Vector3f.
	- Implementado a contagem de bytes utilizado pelo objeto, sizeof().
- Atualização de Terrain para que use ModelRender ao invés de um Model.

16.10.2016 - 0.0.1.12
- Nova opção para que ModelDataDefault permita usar setVertice() passando um Vector3f.
- Correção na fórmula de RawTerrain.offset(), já que a estrutura dos vértices foi alterada.
- Ajustes em RawTerrainModel para quantidade de vértices, normalizações e coordenadas de textura.
	- Ordem dos dados também foi corrigida, agora está renderizando adequadamente.
- Novo método que permite saber a altura do centro da unidade de terreno, avarageHeight().

15.10.2016 - 0.0.1.11
- Implementação inicial de mundos gerados por injeção direta (criado pela engine).
	- Este tipo de mundo Simple Flat Terrain (SFT) será usado pelo editor de mapas futuro na engine.
	- Atualmente o mundo gerado é totalmente plano, mas já suporta múltiplos terrenos.

15.10.2016 - 0.0.1.10
- Adicionado getPrefixo() para WorldRender afim de identificar o mundo em ocasiões específicas.
	- No caso dessa build a ocasião foi relacionado ao gerar a modelagem dos terrenos e validação.
- ResourceRoot.getFilePath() atualizado para que seja possível ter um caminho sem extensão.
- RendererWorlds ainda usava World, para tornar mais dinâmico iremos usar WorldRender.

15.10.2016 - 0.0.1.9
- Implementação de ModelRender, TerrainRender e WorldRender para tornar recursos renderizáveis mais dinâmicos.
	- Desta forma é possível criar classes que possam ser renderizadas de outras formas (raw/injeção direta).
- Corrigido problema onde modos de leitura não eram adicionados, ModelReaderFactory, TextureReaderFactory e WorldReaderFactory.

14.10.2016 - 0.0.1.8
- Corrigido o nome dos pacotes que deveriam ser com.erakin.api e não org.erakin.api.
- Todos os arquivos relacionados a dados de texture foram movidos para api.resources.texture.
	- Separado os formatos de textures (BMP, JPG e PNG) para textures.{file_extension}.
		- Será necessário utilizar TextureManager para especificar quais extensões serão permitidas.
- Todos os arquivos relacionados a dados de modelagens foram movidos para api.resources.model.
	- Separado os formatos de model (MDL e OBJ) para models.{file_extension}.
		- Será necessário utilizar ModelManager para especificar quais extensões serão permitidas.
- Todos os arquivos relacionados a dados de mundos e terrenos foram movidos para api.resources.world.
	- Separado os formatos de mundos (WDS e XML) para models.{file_extension}.
		- Será necessário utilizar WorldManager para especificar quais extensões serão permitidas.

14.10.2016 - 0.0.1.7
- Adicionado novo projeto denominado API, para que seja possível criar aplicações em LWJGL como ferramentas.
	- Alguns arquivos (buffer, input e outros) já foram movidos para a API, já que serão úteis.
	- Boa parte do código da Engine (atual) deve ir para a API e outro projeto Tools deve ser criado.
- Removido atributos de terrainWidth e terrainLength, será considerado terrainDimension, world.
- Será permitido mundos que tenham um terreno de tamanho 1x1 para adicionar possíveis exceções.
	- Acredito que mais a frente será reformulado o modo como é feito o load dos mundos.

21.06.2017 - 0.0.0.6
- Adicionando commandName para que DrawElement possa ser identificado mais facilmente.
	- Agora DrawElement pode ser identificado (parse) por um nome ou código.

16.06.2017 - 0.0.0.5
- PreferencesDefault atualizado para considerar JIni na leitura dos arquivos de configurações das preferências.

16.06.2017 - 0.0.0.4
- ProjectionMatrix não estava sendo atualizado, adicionado o chamado na Engine antes do update dos renderizadores.
- Documentação dos métodos de todos os métodos necessários para a implementação do Input.
- Pequenos ajustes em VirtualKeyboard.start() e considerando SERVICE_RUNNING em alguns métodos.
- Atualizando ProjectionMatrix para que update() só tenha efeito se updated for false.

16.04.2017 - 0.0.0.3
- Convertendo a codificação de charset dos arquivos changelogs para UTF-8.

16.04.2017 - 0.0.0.2
- Subindo versão inicial do projeto:
	- Gerenciamento de texturas, modelagens e shaders.
	- Sistema para detecção das ações realizadas no teclado.
	- Base do sistema (core) para inicialização da Engine.
	- Estrutura básica inicial para construir o mundo.

15.04.2017 - 0.0.0.1
- Initial commit