//==================================================================================================
//                                   ______           _    _       
//                                  |  ____|         | |  (_)      
//                                  | |__   _ __ __ _| | ___ _ __  
//                                  |  __| | '__/ _` | |/ / | '_ \ 
//                                  | |____| | | (_| |   <| | | | |
//                                  |______|_|  \__,_|_|\_\_|_| |_|
//
//== Descrição =====================================================================================
// Registro de Mudanças
//== Formatação ====================================================================================
// {DATA} - (VERSÃO)
// {DESCRIÇÃO}
//== Manual ========================================================================================
// DATA: Dia em que foi feito a mudança no seguinte formato: {DIA}.{MÊS}.{ANO}
//
// VERSÃO: Número da versão respectiva a mudança feita: {SEASON}.{EPISÓDIO}.{PATCH}.{REVISÃO}
//			- SEASON: número da temporada em que o projeto está (anual).
//			- EPISÓDIO: grande conjunto de mudanças contendo várias novidades (mensal).
//			- PATCH: pequeno conjunto de mudanças completas pré-planejadas (semanal).
//			- REVISÃO: quantidade de modificações feitas no projeto (revisão SVN).
//
// DESCRIÇÃO: Deve conter todas as informações respectivas as mudanças ocorridas na revisão.
//				Acompanhando o seguinte formato: {INDENTAÇÃO}- {MENSAGEM}
//			- INDENTAÇÃO: Deve ser feito através de espaços largos (tabs).
//			- MENSAGEM: Breve parágrafo para explicar as alterações feitas.
//==================================================================================================

15.11.2016 - 0.0.4.44
- Incluido nova dependência (lib): Fast JSON 1.2.9.
- Opção de carregar e salvar preferências em arquivos JSON.

15.11.2016 - 0.0.4.43
- Subindo as classes para leitura de tipos de arquivos padrões aceitos pela Engine novamente.

15.11.2016 - 0.0.4.42
- Implementando a possibilidade da Engine funcionar dentro de um Canvas.
	- Será necessário para que criemos um Editor e que as coisas sejam renderizadas no mesmo.

12.11.2016 - 0.0.4.41
- Movido implementação dos leitures de recursos padrões do Erakin para um novo projeto: api-readers.

12.11.2016 - 0.0.4.40
- Movido todo o projeto raiz para o projeto da API, a API deve possuir o necessário para o jogo funcionar.
- Será adicionado o projeto SDK que vai conter o necessário para construir o jogo através de ferramentas.

12.11.2016 - 0.0.4.39
- Implementação da classe que realiza a localização da projeção do mouse em relação a um mundo.
- Mais alguns pequenos ajustes relacionados a documentações.

12.11.2016 - 0.0.4.38
- Correção na documentação de diversas classes e métodos.

12.11.2016 - 0.0.4.37
- Novo método para se saber quantos quadros já foram processados no último segundo em DisplayManager.
- Renomeado getProjectMatrix() para getProjectionMatrix(), o nome do método estava incorreto.
- Implementação da projeção de raio relativo ao posicionamento do mouse na tela, MousePicker.

12.11.2016 - 0.0.4.36
- ColorVector não funcionava corretamente com valores int e implementado clone() e equals().
- TerrainRender agora deve possuir um método getHeightOfTerrain() para se saber o relevo do terreno.
	- Será necessário para as próximas atualizações.

03.11.2016 - 0.0.4.35
- ModelReaderMDL não estava funcionando corretamente conforme esperado e sempre haveria dados para atribuir ao modelo.
- Movido parte da lógica de createTransformationMatrix() para updateTransformationMatrix() afim de deixar mais dinâmico.
- A liberação de um VAO deve ser feito somente após a liberação de todos os VBO?.
- Um Model quanda era liberado não exlcuia a sua referência de seu ModelRoot e clone() não era public.
- Renomeado setTexture() para setUVTexture() afim de manter um padrão de nomes na Engine, ModelDataDefault.
- ModelRoot.release() não considerava a liberação dos dados de seu modelo através de VAO.
- Shader.release() estava fazendo a função de ShaderRoot.release(), Shader deve apenas excluir a referência no ShaderRoot.
	- A mesma coisa foi encontrada respectivamente a Texture e TextureRoot.
- A Engine passa a considerar a liberação automática de recursos não mais utilizados através de DefaultLoader.update().
- Implementação do renderizador de céus, RendererSkybox através de SkyboxRender.

03.11.2016 - 0.0.3.34
- Removido a necessidade do tamanho e depth de texturas cúbicas sempre sempre os mesmos.
	- Cada uma das faces será processada com as informações que lhes pertencem.
- CUBE_LEFT_FACE de 1 para 0; CUBE_RIGHT_FACE de 0 para 1 (ordem correta conforme OpenGL).

03.11.2016 - 0.0.3.33
- VAO estava funcionando somente através de indices, agora pode funcionar sem.
	- Para isso foi adicionado setVertexCount para definir os vértices e glDrawArrays se não tiver indices.
- Implementado criação de texturas cúbicas através de getCubeTexture() ou createCubeTexture(), TextureLoader.
- Toda textura deve possuir um target definido, as comuns será TT_TEXTURE_2D e cubicas TT_TEXTURE_CUBE_MAP.

03.11.2016 - 0.0.3.32
- O vinculo de um VAO deve ser feito antes de storeInVao ser chamado, ModelAttribute.

03.11.2016 - 0.0.3.31
- Desvincular o VBO de índices durante a sua definição causa um erro no OpenGL ao tentar renderizar um modelo.

03.11.2016 - 0.0.3.30
- Modificando o formato de ModelData para que seja mais dinâmico, tornando possível definir atributos ao modelo.
	- Agora é possível incrementar atributos a um modelo sem precisar alterar ModelData ou ModelLoader.
	- ModelLoader vai poder aceitar qualquer modelo e com qualquer atributo disponível.
	- ModelRoot terá definido um vetor de quais atributos foram definidos ao mesmo, habilitando apenas o necessário.
- Agora setAttribute() faz mais sentido, não verifica se já foi tudo definido, por que os valores podem ser alterados.
- Removido tipos de atributos disponíveis em Model, movidos para ModelData e renomeados adequadamente.
- ModelDataDefault foi parcialmente alterado, aonde os dados são salvos foi modificado mas a lógica é a mesma.

03.11.2016 - 0.0.2.29
- Adicionado métodos de setIndices() e setAttribute() passando IntBuffer e FlaotBuffer.
- Removido chamado de bind() internamente de VBO, já que é só usado no VAO que seja feito nele.
- Removido chamado de bind() internamente de VAO, quando for usá-lo que seja feito fora.

03.11.2016 - 0.0.2.28
- Documentação de algumas classes que não estavam completamente documentadas.
- Algumas texturas não eram carregadas corretamente pois TextureReaderDefault não dava flip() no buffer.

02.11.2016 - 0.0.2.27
- Realizado algumas documentações de classes presentes em api.resources.*.
- Movimentação das classes relacionadas a Model, Shader, Texture e World para seus respectivos pacotes.
- Reduzindo um pouco do encapsulamento das classes relativas a Resource e ResourceRoot.
- Implementação de ResourceFileLocation em Resource, assim todos recursos referenciam um arquivo em disco.
- ModelRoot.genResource() criava um Model mas não registrava a referência.

01.11.2016 - 0.0.2.26
- Agora as texturas carredas tem mipmap e GL_TEXTURE_LOD_BIAS definido.
- Trocado GL_TEXTURE_MIN_FILTER de GL_LINEAR para GL_LINEAR_MIPMAP_LINEAR.
- Trocado GL_TEXTURE_MAG_FILTER de GL_LINEAR para GL_LINEAR_MIPMAP_NEAREST.

01.11.2016 - 0.0.2.25
- Implementação de uma classe para realizar cálculos de movimentação de objetos no espaço.

01.11.2016 - 0.0.2.24
- Agora é possível definir com qual cor será preenchida a tela por glClearScreen(), GLUtil.

01.11.2016 - 0.0.2.23
- Adicionado ColorVector para representar cores no sistema ao invés de usar valores float.

31.10.2016 - 0.0.2.22
- O índice das texturas deve ser do tipo float e não int, por algum motivo no Shader buga.
- Agora createShaderProgram() vai especificar qual o programa que não foi possível criar.

29.10.2016 - 0.0.2.21
- Movendo PixelColorOrder de textures.bmp para api.resources.texture, afinal usa-se em BMP e PNG.
- Necessário definir um PIxelColorOrder para estrutura BMP e outor para PNG.
- Ocorre exception em dispatch() ao fechar a Engine em determinados momentos, VirtualKeyboard.
	- Agora verifica se existe a janela criada antes de verificar se esta está ativa.
- Por algum motivo os dados devem ser escritos no formato BGR ao invés de RGB, textures.bmp.
	- Quando obtido de uma paleta de cores também deve ser escrito no formato BGR.
- Em alguns casos a paleta de cores de arquivos BMP não eram lidas, TexturerEaderBMP.
	- Se não houver cores importantes mas há mais dados além da imagem então existe paleta de cores (256 itens).

29.10.2016 - 0.0.2.20
- Ao fechar a janela a Engine não era encerrada, apenas parava de rodar (saia do loop de update e tick).

29.10.2016 - 0.0.2.19
- ShaderReaderGLSL não estava funcionando corregamente, label especificada erroneamente.
- Atualizando Resource e ResourceRoot para se tornarem classes parametrizadas.
	- O objetivo principal é evitar casts desnecessários e burlagem na tipagem.
- Nova atribuição para modelagens que vai permitir multiplas texturas em um único modelo.
- Inicio da implementação para suporte de texturas múltiplas por modelo.
- Agora ModelLoader atribui textureCoords e normals apenas se houver dados para tal.
- Também foi renomeado beforeRenderChunk() para beforeRenderTerrain() e afterRenderChunk() para afterRenderTerrain().

29.10.2016 - 0.0.2.18
- A forma como os dados eram convertidos em PNG e BMP não podiam ser feito do mesmo jeito.
	- BMP usa um buffer com todos os dados em quanto o PNG usa um buffer com uma linha da imagem.
- Não estava sendo possível ler um BMP por que "faltava dados" (não considerava os dados da paleta).

27.10.2016 - 0.0.2.17
- DefaultLoader.toString() não estava funcionando corretamente com ObjectDescription.
- Pequenos ajustes de documentações devido a mudanças anteriores.
- ShaderDefault passa a ser um armazenado de dados para programação Shader temporário como ShaderDataDefault.
- Modificado os métodos que Shader vai implementar e renomado para ShaderRender.
- Implementação de EngineListener para resolver possíveis problemas de procedimentos entre o init e render da Engine.
- Estrutura para leitura de computação gráfica em GLSL conforme os mesmos padrões usados para modelos e texturas.
	- ShaderReaderFactory é especificado quais os tipos de extensões e classes para leitura dos arquivos.
	- ShaderRoot irá guardar as informações dos dados no OpenGL podendo gerar vários Shader.
	- Cada Shader é uma referência para um ShaderRoot podendo usar o mesmo conteúdo de forma diferente.
	- ShaderLoader fica responsável por transcrever os dados obtidos do leitor para o OpenGL.
	- Definido ShaderReaderGLSL para ser o leitor dos arquivos com extensão glsl.

22.10.2016 - 0.0.1.16
- Pequenos ajustes em update() e wasClicked() para evitar possíveis NullPointerExceptions, VirtualKeyboard.

21.10.2016 - 0.0.1.15
- A lógica para wasClicked() não estava 100% funcional, VirtualKeyboard.

21.10.2016 - 0.0.1.14
- Não há necessidade de existir engine.Keyboard, será usado Keyboard/VirtualKeyboard da API.
- VirtualKeyboard.update() causava Exception, modificado a lógica, porém mesma ideia.
- Agora VirtualKeyboard.dispatch() só irá funcionar se a janela do OpenGL estiver ativa.
	- Antes mesmo quando a janela minimizada ou desfocada despachava os KeyEvent.
- Corrigido a lógica de wasClicked() que estava sempre retornando true, VirtualKeyboard.
- Também foi movido INSTANCE de Keyboard para VirtualKeyboard, caso contrário não vai funcionar.
- VirtualKeyboard também será vinculado a biblioteca de serviços, ServiceSystem.

21.10.2016 - 0.0.1.13
- Um dos construtores de FileVersion não estava definindo minor corretamente.
- Alterando ModelRender para que seja um GLBind, já que usa da mesma ideia/funções.
	- Também foi incorporado outro método, getTexture().
- Agora ModelDataDefault permite usar setNormal com um Vector3f.
	- Implementado a contagem de bytes utilizado pelo objeto, sizeof().
- Atualização de Terrain para que use ModelRender ao invés de um Model.

16.10.2016 - 0.0.1.12
- Nova opção para que ModelDataDefault permita usar setVertice() passando um Vector3f.
- Correção na fórmula de RawTerrain.offset(), já que a estrutura dos vértices foi alterada.
- Ajustes em RawTerrainModel para quantidade de vértices, normalizações e coordenadas de textura.
	- Ordem dos dados também foi corrigida, agora está renderizando adequadamente.
- Novo método que permite saber a altura do centro da unidade de terreno, avarageHeight().

15.10.2016 - 0.0.1.11
- Implementação inicial de mundos gerados por injeção direta (criado pela engine).
	- Este tipo de mundo Simple Flat Terrain (SFT) será usado pelo editor de mapas futuro na engine.
	- Atualmente o mundo gerado é totalmente plano, mas já suporta múltiplos terrenos.

15.10.2016 - 0.0.1.10
- Adicionado getPrefixo() para WorldRender afim de identificar o mundo em ocasiões específicas.
	- No caso dessa build a ocasião foi relacionado ao gerar a modelagem dos terrenos e validação.
- ResourceRoot.getFilePath() atualizado para que seja possível ter um caminho sem extensão.
- RendererWorlds ainda usava World, para tornar mais dinâmico iremos usar WorldRender.

15.10.2016 - 0.0.1.9
- Implementação de ModelRender, TerrainRender e WorldRender para tornar recursos renderizáveis mais dinâmicos.
	- Desta forma é possível criar classes que possam ser renderizadas de outras formas (raw/injeção direta).
- Corrigido problema onde modos de leitura não eram adicionados, ModelReaderFactory, TextureReaderFactory e WorldReaderFactory.

14.10.2016 - 0.0.1.8
- Corrigido o nome dos pacotes que deveriam ser com.erakin.api e não org.erakin.api.
- Todos os arquivos relacionados a dados de texture foram movidos para api.resources.texture.
	- Separado os formatos de textures (BMP, JPG e PNG) para textures.{file_extension}.
		- Será necessário utilizar TextureManager para especificar quais extensões serão permitidas.
- Todos os arquivos relacionados a dados de modelagens foram movidos para api.resources.model.
	- Separado os formatos de model (MDL e OBJ) para models.{file_extension}.
		- Será necessário utilizar ModelManager para especificar quais extensões serão permitidas.
- Todos os arquivos relacionados a dados de mundos e terrenos foram movidos para api.resources.world.
	- Separado os formatos de mundos (WDS e XML) para models.{file_extension}.
		- Será necessário utilizar WorldManager para especificar quais extensões serão permitidas.

14.10.2016 - 0.0.1.7
- Adicionado novo projeto denominado API, para que seja possível criar aplicações em LWJGL como ferramentas.
	- Alguns arquivos (buffer, input e outros) já foram movidos para a API, já que serão úteis.
	- Boa parte do código da Engine (atual) deve ir para a API e outro projeto Tools deve ser criado.
- Removido atributos de terrainWidth e terrainLength, será considerado terrainDimension, world.
- Será permitido mundos que tenham um terreno de tamanho 1x1 para adicionar possíveis exceções.
	- Acredito que mais a frente será reformulado o modo como é feito o load dos mundos.

21.06.2017 - 0.0.0.6
- Adicionando commandName para que DrawElement possa ser identificado mais facilmente.
	- Agora DrawElement pode ser identificado (parse) por um nome ou código.

16.06.2017 - 0.0.0.5
- PreferencesDefault atualizado para considerar JIni na leitura dos arquivos de configurações das preferências.

16.06.2017 - 0.0.0.4
- ProjectionMatrix não estava sendo atualizado, adicionado o chamado na Engine antes do update dos renderizadores.
- Documentação dos métodos de todos os métodos necessários para a implementação do Input.
- Pequenos ajustes em VirtualKeyboard.start() e considerando SERVICE_RUNNING em alguns métodos.
- Atualizando ProjectionMatrix para que update() só tenha efeito se updated for false.

16.04.2017 - 0.0.0.3
- Convertendo a codificação de charset dos arquivos changelogs para UTF-8.

16.04.2017 - 0.0.0.2
- Subindo versão inicial do projeto:
	- Gerenciamento de texturas, modelagens e shaders.
	- Sistema para detecção das ações realizadas no teclado.
	- Base do sistema (core) para inicialização da Engine.
	- Estrutura básica inicial para construir o mundo.

15.04.2017 - 0.0.0.1
- Initial commit